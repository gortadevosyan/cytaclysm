module SceneProtos.CoreEngine.Common exposing (Model, nullModel, initModel)

{-| Common module

This module is generated by Messenger, don't modify this.

@docs Model, nullModel, initModel

-}

import Lib.Env.Env exposing (Env, addCommonData)
import Lib.Scene.Base exposing (LayerPacker, SceneInitData(..))
import SceneProtos.CoreEngine.GameLayer.Export as GameLayer
import SceneProtos.CoreEngine.GameLayer.Global as GameLayerG
import SceneProtos.CoreEngine.LayerBase exposing (CommonData, nullCommonData)
import SceneProtos.CoreEngine.LayerSettings exposing (LayerT)
import SceneProtos.CoreEngine.SceneInit exposing (initCommonData, nullCoreEngineInit)


{-| Model
-}
type alias Model =
    LayerPacker CommonData LayerT


{-| nullModel
-}
nullModel : Model
nullModel =
    { commonData = nullCommonData
    , layers = []
    }


{-| Initialize the model
-}
initModel : Env -> SceneInitData -> Model
initModel env init =
    let
        layerInitData =
            case init of
                CoreEngineInitData x ->
                    x

                _ ->
                    nullCoreEngineInit
    in
    { commonData = initCommonData env layerInitData
    , layers =
        [ GameLayerG.getLayerT <| GameLayer.initLayer (addCommonData nullCommonData env) layerInitData
        ]
    }
